{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ANTONIO\\\\OneDrive\\\\Escritorio\\\\BOOTCAMP\\\\eshop\\\\client\\\\src\\\\components\\\\Context\\\\ProductsContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProductsConsumer = /*#__PURE__*/createContext();\nexport function ProductsProvider(props) {\n  _s();\n\n  const [ProductList, setProductList] = useState([]);\n  const [cartItemCount, setCartItemCount] = useState({\n    count: 0\n  });\n  const [Loading, setLoading] = useState(true);\n  useEffect(() => {\n    fatchApi();\n  }, []);\n\n  function fatchApi() {\n    //GETTING THE API FROM NODE\n    axios.get(\"http://localhost:4000\").then(res => {\n      setProductList(res.data);\n      console.log(setProductList(res.data)); // GETTING THE COUNT OF THE CART\n\n      const count = res.data.filter(e => e.inCart === true);\n      setCartItemCount({\n        count: count.length\n      });\n      setLoading(false);\n    }).catch(err => console.log(err.data));\n  }\n\n  const totalPrice = (quentity, id) => {\n    // quentity===\"\"?quentity=\"\":quentity=Math.round(quentity)\n    // const productUpdate={total:true}\n    // axios.patch(`http://localhost:5000/api/products/update/${id}`,productUpdate)\n    //     .then((res)=>{\n    //         setCartItemCount({count:cartItemCount.count+1}) \n    //UPDATING STATE PRODUCT\n    // const products=[...ProductList]\n    // products.map(product=>{\n    //     if(product._id===id){\n    //         return [product, product.total=product.price*quentity, product.count=quentity]\n    //     }\n    //     return product\n    // })\n    //      setProductList(products)\n    // })\n    // .catch((err)=>console.log(err.data))\n    quentity === \"\" ? quentity = \"\" : quentity = Math.round(quentity);\n    const products = [...ProductList];\n    products.map(product => {\n      if (product._id === id) {\n        return [product, product.total = product.price * quentity, product.count = quentity];\n      }\n\n      return product;\n    });\n    setProductList(products);\n  };\n\n  const addToCart = id => {\n    const inCart = {\n      inCart: true\n    };\n    axios.patch(`https://e-commerce-endpoints.herokuapp.com/api/products/update/${id}`, inCart).then(res => {\n      setCartItemCount({\n        count: cartItemCount.count + 1\n      }); //UPDATING STATE PRODUCT\n\n      const products = [...ProductList];\n      products.map(product => {\n        if (product._id === id) {\n          return [product, product.inCart = true];\n        }\n\n        return product;\n      });\n      setProductList(products);\n    }).catch(err => console.log(err.data));\n  };\n\n  const removeFromCart = id => {\n    const inCart = {\n      inCart: false\n    };\n    axios.patch(`https://e-commerce-endpoints.herokuapp.com/api/products/update/${id}`, inCart).then(res => {\n      setCartItemCount({\n        count: cartItemCount.count - 1\n      }); //UPDATING STATE PRODUCT\n\n      const products = [...ProductList];\n      products.map(product => {\n        if (product._id === id) {\n          return [product, product.inCart = false];\n        }\n\n        return product;\n      });\n      setProductList(products);\n    }).catch(err => console.log(err.data));\n  };\n\n  return /*#__PURE__*/_jsxDEV(ProductsConsumer.Provider, {\n    value: {\n      ProductList,\n      Loading,\n      DetailProduct: cartItemCount,\n      onRemoveCart: removeFromCart,\n      onClickCart: addToCart,\n      onPrice: totalPrice\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ProductsProvider, \"/wtGbwIpJ/p12WwHSAnULJGO9i4=\");\n\n_c = ProductsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductsProvider\");","map":{"version":3,"sources":["C:/Users/ANTONIO/OneDrive/Escritorio/BOOTCAMP/eshop/client/src/components/Context/ProductsContext.js"],"names":["React","createContext","useState","useEffect","axios","ProductsConsumer","ProductsProvider","props","ProductList","setProductList","cartItemCount","setCartItemCount","count","Loading","setLoading","fatchApi","get","then","res","data","console","log","filter","e","inCart","length","catch","err","totalPrice","quentity","id","Math","round","products","map","product","_id","total","price","addToCart","patch","removeFromCart","DetailProduct","onRemoveCart","onClickCart","onPrice","children"],"mappings":"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","sourcesContent":["import React, {createContext, useState, useEffect} from 'react'\r\nimport axios from 'axios';\r\n\r\nexport const ProductsConsumer = createContext()\r\n\r\nexport function ProductsProvider(props) {\r\n\r\n    const [ProductList, setProductList] = useState([])\r\n    const [cartItemCount, setCartItemCount] = useState({count:0})\r\n    const [Loading, setLoading] = useState(true)\r\n\r\n\r\n    useEffect(() =>  {\r\n        fatchApi()\r\n    },[])\r\n\r\n    function fatchApi() {\r\n        //GETTING THE API FROM NODE\r\n        axios.get(\"http://localhost:4000\")\r\n            .then((res)=>{\r\n                setProductList(res.data)\r\n                console.log(setProductList(res.data))\r\n                // GETTING THE COUNT OF THE CART\r\n                const count=res.data.filter((e)=>e.inCart===true)\r\n                setCartItemCount({count:count.length})\r\n                setLoading(false)\r\n            })\r\n            .catch((err)=>console.log(err.data))\r\n \r\n    }\r\n    \r\n    const totalPrice=(quentity,id)=>{\r\n\r\n        // quentity===\"\"?quentity=\"\":quentity=Math.round(quentity)\r\n        // const productUpdate={total:true}\r\n\r\n        // axios.patch(`http://localhost:5000/api/products/update/${id}`,productUpdate)\r\n        //     .then((res)=>{\r\n        //         setCartItemCount({count:cartItemCount.count+1}) \r\n                //UPDATING STATE PRODUCT\r\n                // const products=[...ProductList]\r\n                // products.map(product=>{\r\n                //     if(product._id===id){\r\n                //         return [product, product.total=product.price*quentity, product.count=quentity]\r\n                //     }\r\n                //     return product\r\n                // })\r\n    \r\n            //      setProductList(products)\r\n            // })\r\n            // .catch((err)=>console.log(err.data))\r\n\r\n\r\n        quentity===\"\"?quentity=\"\":quentity=Math.round(quentity)\r\n        const products=[...ProductList];\r\n        products.map(product=>{\r\n            if(product._id===id){\r\n                return [product, product.total=product.price*quentity, product.count=quentity]\r\n            }\r\n            return product;\r\n        })\r\n        setProductList(products);\r\n    }\r\n\r\n    const addToCart=(id)=>{\r\n\r\n        const inCart={inCart:true}\r\n\r\n        axios.patch(`https://e-commerce-endpoints.herokuapp.com/api/products/update/${id}`,inCart)\r\n            .then((res)=>{\r\n                setCartItemCount({count:cartItemCount.count+1}) \r\n                //UPDATING STATE PRODUCT\r\n                const products=[...ProductList]\r\n                products.map(product=>{\r\n                    if(product._id===id){\r\n                        return [product, product.inCart=true]\r\n                    }\r\n                    return product\r\n                })\r\n    \r\n                 setProductList(products)\r\n            })\r\n            .catch((err)=>console.log(err.data))\r\n\r\n           \r\n      \r\n    }\r\n\r\n    const removeFromCart=(id)=>{\r\n\r\n        const inCart={inCart:false}\r\n\r\n        axios.patch(`https://e-commerce-endpoints.herokuapp.com/api/products/update/${id}`,inCart)\r\n            .then((res)=>{\r\n                setCartItemCount({count:cartItemCount.count-1}) \r\n                //UPDATING STATE PRODUCT\r\n                const products=[...ProductList]\r\n                products.map(product=>{\r\n                    if(product._id===id){\r\n                        return [product, product.inCart=false]\r\n                    }\r\n                    return product\r\n                })\r\n    \r\n                 setProductList(products)\r\n            })\r\n            .catch((err)=>console.log(err.data))\r\n    }\r\n    \r\n\r\n    return (\r\n        <ProductsConsumer.Provider value={{ProductList, \r\n                                           Loading,\r\n                                           DetailProduct: cartItemCount, \r\n                                           onRemoveCart:removeFromCart, \r\n                                           onClickCart:addToCart,\r\n                                           onPrice:totalPrice,\r\n                                           }}>\r\n            {props.children}\r\n        </ProductsConsumer.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}